<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML'></script>
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.533.0.min.js"></script>
<script>
  window.onload = function() {
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    reset();
  };
</script>

<style>
  .loader {
    border: 8px solid #f3f3f3;
    border-radius: 50%;
    border-top: 9px solid #3498db;
    width: 20px;
    height: 20px;
    -webkit-animation: spin 2s linear infinite; /* Safari */
    animation: spin 2s linear infinite;
  }

  /* Safari */
  @-webkit-keyframes spin {
    0% { -webkit-transform: rotate(0deg); }
    100% { -webkit-transform: rotate(360deg); }
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<div style="padding: 8px">
  <p>Question <%= raw('<a href="https://admin1.neetprep.com/admin/questions/'+ @question.id.to_s + '/edit" target="_blank">(Edit Question)</a>') %></p>
  <div style="border: 1px solid black">
    <p><%= raw(@questionBody) %></p>
  </div>

  <p>Hints</p>
  <div style="border: 1px solid black">
    <% @question_hints_data.each do |key, value| %>
      <div style="margin-top: 4px; margin-left: 36px; padding: 8px; border: 1px solid #828282">
        <p><%= raw('<a href="/admin/question_hints/'+ key.to_s + '/edit" target="_blank">(Edit Hint)</a>') %></p>
        <h5 style="margin-top: -10px"><%=raw(value[1]) %></h5>
      </div>
    <% end %>
  </div>

  <div style="margin: 8px">
    <p>Record audio hint</p>
    <div style="display: none" class="loader" id="loader"></div>
    <div id="input_div" style="display: none">
      <button style="margin-top: 8px" onclick="startRecording()" id="audio_button">Start Recording</button>
      -- or --
      <input id="audioFile" type="file" name="myFile" onchange="fileSelected()">
    </div>
    <div class="table-responsive">
       <table class="table table-bordered" id="dynamic_field">
      
      </table>
   </div>
    <div id="input_stop_div" style="display: none">
        <button style="margin-top: 8px" onclick="stopRecording()" id="rec_stop_button">Stop Recording</button>
    </div>
    <div id="add_more_audio_div" style="display: none">
        <button style="margin-top: 8px" onclick="addNewAudio()" id="add_more_audio_button">Add More Audio</button>
    </div>
    <div id="upload_div" style="display: none">
        <button style="margin-top: 8px" onclick="uploadAndAttachRecording()" id="upload_attach_button">Upload and Attach</button>
    </div>
  </div>
</div>

<script>
  var loader = document.getElementById("loader");
  var audioButton = document.getElementById("audio_button");
  var uploadAudioButton = document.getElementById("upload_attach_button");
  var fileInput = document.getElementById('audioFile');
  var cancleButton = document.getElementById('cancleButton');
  var stopRecordingButton = document.getElementById('rec_stop_button');
  var dynamicAudioView = document.getElementById('dynamic_field');
  var inputDiv = document.getElementById("input_div");
  var inputStopDiv = document.getElementById("input_stop_div");
  var addMoreAudioDiv = document.getElementById("add_more_audio_div");
  var uploadDiv = document.getElementById("upload_div");
  
  var totalRecording = 0
  var uploadFromFile = false;
  var audioChunks = [];
  var audioUrl = null;
  var audioBlob = [];
  var mediaRecorder = null;

  function fileSelected(e) {
    uploadFromFile = true;
    inputDiv.style.display = 'none';
    stopRecordingButton.innerHTML = "Reset";
    stopRecordingButton.onclick = reset;
    inputStopDiv.style.display = 'block';
    addMoreAudioDiv.style.display = 'block';
    uploadDiv.style.display = 'block';
    dynamicAudioView.style.display = 'block';

    var file = fileInput.files[0];
    if (file) {
      var reader = new FileReader();
      reader.onload = function (e) {
      }
      reader.readAsDataURL(file);
    }
  }

  function addNewAudio(){
    startRecording();
    stopRecordingButton.innerHTML = "Stop Recording";
    stopRecordingButton.onclick = stopRecording;
  }

  function startRecording () {
    loader.style.display = 'block';
    inputDiv.style.display = 'none';
    inputStopDiv.style.display = 'block';
    navigator.mediaDevices.getUserMedia({ audio: true })
    .then(stream => {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.start();

      mediaRecorder.addEventListener("dataavailable", event => {
        audioChunks.push(event.data);
      });
    });
  }

  function arrayRemove(arr, id) { 
   return arr.filter(function(data){ 
       return data.id != id; 
   }); 
  
} 
  function removeRecording(div){
    const id = div.id;
    audioBlob = arrayRemove(audioBlob,id);
    document.getElementById('audio_row'+id).remove();
    if(audioBlob.length==0){
      reset();
    }
  }

  function stopRecording () {
    loader.style.display = 'none';
    stopRecordingButton.innerHTML = "Reset";
    stopRecordingButton.onclick = reset;

    mediaRecorder.addEventListener("stop", () => {
      console.log ("Preparing audio");
      var audioChun = new Blob(audioChunks);
      audioUrl = URL.createObjectURL(audioChun);
      totalRecording +=1
      data={
        audioChunk : audioChun,
        id : totalRecording
      }
      audioBlob.push(data);
     
      dynamicAudioView.innerHTML += ('<tr id="audio_row'+totalRecording+'"><td> <audio controls id="audio" src="'+audioUrl+'"></audio></td><td><button type="button" name="remove_button" id="'+totalRecording+'" class="btn btn-danger btn_remove" onClick="removeRecording(this)">X</button></td></tr>');      
      addMoreAudioDiv.style.display = 'block';
      dynamicAudioView.style.display = 'block';
      uploadDiv.style.display = 'block';
    });
    console.log ("Stopping recording");
    mediaRecorder.stop();
  }

  function uploadAndAttachRecording () {
    # loader.style.display = 'block'
    # var bucketName = 'question-hints';
    # var bucketRegion = 'ap-south-1';
    # var currentTime = Date.now();

    # var config = new AWS.Config({
    #   accessKeyId: 'AKIAYEPQTPG6K7CEFU6D', secretAccessKey: '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', region: 'ap-south-1'
    # });

    # var credentials = new AWS.Credentials('AKIAYEPQTPG6K7CEFU6D', 'XtUqnXWkwvPvlK+t8gwuShuESJA1fjnBV1q6AwTX');
    # AWS.config.region = bucketRegion;
    # AWS.config.credentials = credentials;

    # var bucket = new AWS.S3({
    #   params: {
    #       Bucket: bucketName
    #   }
    # });
    # if (!uploadFromFile)
    #   var file = new File([audioBlob], "question_hints_" + "<%= @questionId%>" + "_" + currentTime + ".ogg");
    # else
    #   var file = fileInput.files[0];

    # if (!file) {
    #   alert ("File error");
    #   loader.style.display = 'none';
    #   return;
    # } else {
    #   var params = {
    #     Key: (!uploadFromFile ? file.name : (<%=@questionId%> + "_" + currentTime + "_" + file.name)),
    #     ContentType: file.type,
    #     Body: file,
    #     ACL: 'public-read'
    #   };
    #   bucket.putObject(params, function(err, data) {
    #     if (err) {
    #       console.log(" Error while  UPLOADING Audio :" + err);
    #       alert ('Error uploading audio');

    #       loader.style.display = 'none';
    #     } else {
    #       if (!uploadFromFile)
    #         var fileUrl = 'https://question-hints.s3-us-west-2.amazonaws.com/' + file.name + file.type;
    #       else
    #         var fileUrl = 'https://question-hints.s3-us-west-2.amazonaws.com/' + <%=@questionId%> + "_" + currentTime + "_" + file.name;
    #       insertIntoHint('<%= @questionId %>', fileUrl);
    #       reset ();
    #     }
    #   });
    # }
  }

  function insertIntoHint(id, fileUrl) {
    audioTag = '<audio controls style="display: block" id="audio_player"><source src="' + fileUrl +'" type="audio/ogg">Your browser does not support the audio element.</audio>'
      var xhr = new XMLHttpRequest();
      xhr.open("POST", window.location.origin + '/questions/create_hint_row', true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      var params = "id=" + id + "&hint=" + audioTag
      xhr.send(params);

      xhr.onreadystatechange = function() {
        if (xhr.readyState == XMLHttpRequest.DONE) {
          console.log("Done");
          window.location.href = window.location.href;
        }
      }
  }

  function reset() {
    audioBlob = [];
    audioChunks = [];
    dynamicAudioView.innerHTML = null;
    stopRecordingButton.innerHTML = "Stop Recording";
    stopRecordingButton.onclick = stopRecording;
    loader.style.display = 'none';
    inputDiv.style.display = 'block';
    inputStopDiv.style.display = 'none';
    addMoreAudioDiv.style.display = 'none';
    dynamicAudioView.style.display = 'none';
    uploadDiv.style.display = 'none';
  }
</script>
