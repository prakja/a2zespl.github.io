<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML'></script>
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.533.0.min.js"></script>
<!-- CSS only -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">

<!-- JS, Popper.js, and jQuery -->
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>

<style>
   .select2-container {
      min-width: 100% !important;
    }
  .loader {
    border: 8px solid #f3f3f3;
    border-radius: 50%;
    border-top: 9px solid #3498db;
    width: 20px;
    height: 20px;
    -webkit-animation: spin 2s linear infinite; /* Safari */
    animation: spin 2s linear infinite;
  }

  /* Safari */
  @-webkit-keyframes spin {
    0% { -webkit-transform: rotate(0deg); }
    100% { -webkit-transform: rotate(360deg); }
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<div style="padding: 8px">
  <p>Question <%= raw('<a href="https://admin1.neetprep.com/admin/questions/'+ @question.id.to_s + '/edit" target="_blank">(Edit Question)</a>') %></p>
  <div style="border: 1px solid black">
    <p><%= raw(@questionBody) %></p>
  </div>

  <p>Hints</p>
  <div style="border: 1px solid black">
    <% @question_hints_data.each do |key, value| %>
      <div style="margin-top: 4px; margin-left: 36px; padding: 8px; border: 1px solid #828282">
        <p><%= raw('<a href="/admin/question_hints/'+ key.to_s + '/edit" target="_blank">(Edit Hint)</a>') %><button type="button" class="btn btn-link text-secondary" onClick="onVideoLink(<%=key.to_s%>, <%=value[2]%>)" ><% if value[2] != nil%>
          (Update Video Hint)
         <% else %>
          (Add Video Hint)
        <% end %></button>
        <% if value[2] != nil %>
        <a href='/admin/video_links/<%=value[2].to_s %>/edit' target="_blank">(<%=value[3].to_s %>)</a>
        <button type="button" class="btn btn-link text-danger" onClick="onRemoveVideoLink(<%=key.to_s%>)">(Remove Video Hint)</button>

        <% end %>
        </p>
        
        <h5 style="margin-top: -10px"><%=raw(value[1]) %></h5>
      </div>
    <% end %>
  </div>

  <div id="videoLinkModal" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Video Hint</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
         <select class="container" name="video" id="videoList" >
           <option value=''>Hint video</option>
           <% @videoList_data.each do |key, value| %>
             <%= raw("<option value='" + key.to_s + "' >" + value.to_s + "</option>") %>
           <% end %>
         </select>
         <input id="hint_id" name="hint_id" type="hidden"/>
      </div>
       <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="onChapterChange()">Save changes</button>
      </div>
    </div>
  </div>
</div>


  <div style="margin: 8px">
    <p>Record audio hint</p>
    <div style="display: none" class="loader" id="loader"></div>
    <div id="input_div" style="display: none">
      <button style="margin-top: 8px" onclick="startRecording()" id="audio_button">Start Recording</button>
      -- or --
      <input id="audioFile" accept="audio/*" type="file" name="myFile" onchange="fileSelected()">
    </div>
    <div class="table-responsive">
       <table class="table table-bordered" id="dynamic_field">

      </table>
   </div>
    <div id="input_stop_div" style="display: none">
        <button style="margin-top: 8px" onclick="stopRecording()" id="rec_stop_button">Stop Recording</button>
    </div>
    <div id="add_more_audio_div" style="display: none">
        <button style="margin-top: 8px" onclick="addNewAudio()" id="add_more_audio_button">Add More Audio</button>
    </div>
    <div id="upload_div" style="display: none">
        <button class="btn-primary" style="margin-top: 8px" onclick="uploadAndAttachRecording()" id="upload_attach_button">Upload and Attach</button>
    </div>
  </div>
</div>

<script>
 window.onload = function() {
    MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    reset();
  };
    $(function () {
      $("select").select2();
    });
  var loader = document.getElementById("loader");
  var audioButton = document.getElementById("audio_button");
  var uploadAudioButton = document.getElementById("upload_attach_button");
  var fileInput = document.getElementById('audioFile');
  var cancleButton = document.getElementById('cancleButton');
  var stopRecordingButton = document.getElementById('rec_stop_button');
  var dynamicAudioView = document.getElementById('dynamic_field');
  var inputDiv = document.getElementById("input_div");
  var inputStopDiv = document.getElementById("input_stop_div");
  var addMoreAudioDiv = document.getElementById("add_more_audio_div");
  var uploadDiv = document.getElementById("upload_div");

  var totalRecording = 0
  var audioChunks = [];
  var audioUrl = null;
  var audioBlob = [];
  var mediaRecorder = null;

  function onRemoveVideoLink(hintId){
      $.ajax({
      method: "POST",
      url: window.location.origin + '/questions/remove_video_link_hint',
      headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        hintId: hintId
      }
    }).done(function(response){

      console.log("Done");
      window.location.href = window.location.href;
    }).fail(function(error) {
      loader.style.display = 'none';
       console.log(" Error while Removing Hint Video Audio :" + error);
       alert ('Error uploading audio');
    });

  }
  
  function onVideoLink(hintId, selectedVideo){

    if(selectedVideo){
        $('#videoList option[value='+selectedVideo+']').attr("selected", "selected");
        $("#videoList option:selected").prependTo("#videoList");
    }

    $('#videoLinkModal').modal({backdrop: 'static', keyboard: true, show: true});
    document.getElementById("hint_id").value = hintId;
  }

  function onChapterChange() {
      let videoId = document.getElementById("videoList").value;
      let hintId = document.getElementById("hint_id").value;
      $.ajax({
      method: "POST",
      url: window.location.origin + '/questions/video_link_hint',
      headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        videoId: videoId,
        hintId: hintId
      }
    }).done(function(response){

      console.log("Done");
      window.location.href = window.location.href;
    }).fail(function(error) {
      loader.style.display = 'none';
       console.log(" Error while Linking Audio :" + error);
       alert ('Error uploading audio');
    });
  }

function dataURItoBlob(dataURI) {
    var binary = atob(dataURI.split(',')[1]);
    var array = [];
    for(var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
    }
    return new Blob([new Uint8Array(array)], {type: 'image/jpeg'});
}


  function fileSelected(e) {
    inputDiv.style.display = 'none';
    stopRecordingButton.innerHTML = "Reset";
    stopRecordingButton.onclick = reset;
    inputStopDiv.style.display = 'block';
    addMoreAudioDiv.style.display = 'block';
    uploadDiv.style.display = 'block';
    dynamicAudioView.style.display = 'block';

    var file = fileInput.files[0];
    if (file) {
      var reader = new FileReader();
      reader.onload = function (e) {
       var binary= dataURItoBlob(e.target.result);
       
        addBlobToList(binary, 'file-select');
      }
      reader.readAsDataURL(file);
    }
  }

  function addNewAudio(){
    uploadDiv.style.display = 'none';
    addMoreAudioDiv.style.display = 'none';
    startRecording();
    stopRecordingButton.innerHTML = "Stop Recording";
    stopRecordingButton.onclick = stopRecording;
  }

  function startRecording () {
    audioChunks = [];
    loader.style.display = 'block';
    inputDiv.style.display = 'none';
    inputStopDiv.style.display = 'block';
    navigator.mediaDevices.getUserMedia({ audio: true })
    .then(stream => {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.start();

      mediaRecorder.addEventListener("dataavailable", event => {
        audioChunks.push(event.data);
      });
    });
  }

  function arrayRemove(arr, id) {
   return arr.filter(function(data){
       return data.id != id;
   });

}
  function removeRecording(div){
    const id = div.id;
    audioBlob = arrayRemove(audioBlob,id);
    document.getElementById('audio_row'+id).remove();
    if(audioBlob.length==0){
      reset();
    }
  }

  function addBlobToList(audioChun, type){
    
      audioUrl =  URL.createObjectURL(audioChun);
      totalRecording +=1
      data={
        audioChunk : audioChun,
        id : totalRecording
      }
      audioBlob.push(data);
      dynamicAudioView.innerHTML += ('<tr id="audio_row'+totalRecording+'"><td> <audio controls id="audio" src="'+audioUrl+'"></audio></td><td><button type="button" name="remove_button" id="'+totalRecording+'" class="btn btn-danger btn_remove" onClick="removeRecording(this)">Remove Audio ('+totalRecording+')</button></td></tr>');
      addMoreAudioDiv.style.display = 'block';
      dynamicAudioView.style.display = 'block';
      uploadDiv.style.display = 'block';
  }


const anAsyncUploadFunction = async (item,s3) => {
	return await uploadAudio(item,s3)
}

const uploadAudio = (data, s3) => { //a function that returns a promise

 var bucketName = 'question_hints';
 var currentTime = Date.now();
 var fileName= "question_hints_" + "<%= @questionId%>" + "_" + currentTime+ ".mp3" ;
 var file = new File([data.audioChunk],fileName );
 var params = {
         Bucket: bucketName,
         Key: fileName,
         ContentType: file.type,
         Body: file,
         ACL: 'public-read'
  };



	return new Promise(resolve => {

    s3.putObject(params, function(err, data) {
      if(err){
        reject("error");
      }else{
          var fileUrl = 'https://spaces.neetprep.com/question_hints/' + file.name + file.type;
          var audioTag = '<audio controls style="display: block" id="audio_player"><source src="' + fileUrl +'" type="audio/mp3">Your browser does not support the audio element.</audio>'
          data1 ={
            url : audioTag
          }
          resolve(data1);
      }
   });
	});
}

function stopRecording () {
    loader.style.display = 'none';
    stopRecordingButton.innerHTML = "Reset";
    stopRecordingButton.onclick = reset;

    mediaRecorder.addEventListener("stop", () => {
      console.log ("Preparing audio");
      var audioChun = new Blob(audioChunks, { 'type' : 'audio/mp3; codecs=opus' });
      addBlobToList(audioChun);
    });
    console.log ("Stopping recording");
    mediaRecorder.stop();
  }

  async function  uploadAndAttachRecording () {
  hideUploadingView();
    loader.style.display = 'block'
    var bucketRegion = 'ap-south-1';

   const spacesEndpoint = new AWS.Endpoint('https://neetprep.sgp1.digitaloceanspaces.com');
    const s3 = new AWS.S3({
    endpoint: spacesEndpoint,
    accessKeyId: "TTCH2ARR4BHDJUB2RVJF",
    secretAccessKey: "ibpuDBypoyTHCoSb89eMKRmAYysgtOKdbWlddv69lB8"
  });

  const getData = async () => {
		return await Promise.all(audioBlob.map(item => anAsyncUploadFunction(item,s3)))
	}

  await getData()
  .then(function (response) {
		  insertIntoHint('<%= @questionId %>', JSON.stringify(response));
		}).catch(function (error) {
	  	 loader.style.display = 'none';
       console.log(" Error while  UPLOADING Audio :" + error);
       alert ('Error uploading audio');
		});

}

  function insertIntoHint(id, audioTags) {
   
    $.ajax({
      method: "POST",
      url: window.location.origin + '/questions/create_hint_row',
      headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
      },
      data: {
        id: id,
        hints: [audioTags]
      }
    }).done(function(response){
      reset();
      console.log("Done");
      window.location.href = window.location.href;
    }).fail(function(error) {
      loader.style.display = 'none';
       console.log(" Error while  UPLOADING Audio :" + error);
       alert ('Error uploading audio');
    });

  }

  function hideUploadingView(){
    inputDiv.style.display = 'none';
    inputStopDiv.style.display = 'none';
    addMoreAudioDiv.style.display = 'none';
    dynamicAudioView.style.display = 'none';
    uploadDiv.style.display = 'none';
    inputDiv.style.display = 'none';

  }

  function reset() {
    totalRecording = 0;
    audioBlob = [];
    audioChunks = [];
    dynamicAudioView.innerHTML = null;
    stopRecordingButton.innerHTML = "Stop Recording";
    stopRecordingButton.onclick = stopRecording;
    loader.style.display = 'none';
    inputDiv.style.display = 'block';
    inputStopDiv.style.display = 'none';
    addMoreAudioDiv.style.display = 'none';
    dynamicAudioView.style.display = 'none';
    uploadDiv.style.display = 'none';
  }
</script>
